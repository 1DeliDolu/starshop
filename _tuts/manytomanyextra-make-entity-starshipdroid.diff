diff --git a/src/Entity/Droid.php b/src/Entity/Droid.php
index da39b5e..29ae32f 100644
--- a/src/Entity/Droid.php
+++ b/src/Entity/Droid.php
@@ -21,8 +21,15 @@ class Droid
     #[ORM\Column(length: 255)]
     private ?string $primaryFunction = null;
 
+    /**
+     * @var Collection<int, StarshipDroid>
+     */
+    #[ORM\OneToMany(targetEntity: StarshipDroid::class, mappedBy: 'droid')]
+    private Collection $starshipDroids;
+
     public function __construct()
     {
+        $this->starshipDroids = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -80,4 +87,34 @@ class Droid
 
         return $this;
     }
+
+    /**
+     * @return Collection<int, StarshipDroid>
+     */
+    public function getStarshipDroids(): Collection
+    {
+        return $this->starshipDroids;
+    }
+
+    public function addStarshipDroid(StarshipDroid $starshipDroid): static
+    {
+        if (!$this->starshipDroids->contains($starshipDroid)) {
+            $this->starshipDroids->add($starshipDroid);
+            $starshipDroid->setDroid($this);
+        }
+
+        return $this;
+    }
+
+    public function removeStarshipDroid(StarshipDroid $starshipDroid): static
+    {
+        if ($this->starshipDroids->removeElement($starshipDroid)) {
+            // set the owning side to null (unless already changed)
+            if ($starshipDroid->getDroid() === $this) {
+                $starshipDroid->setDroid(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/src/Entity/Starship.php b/src/Entity/Starship.php
index 36209a3..1d725e4 100644
--- a/src/Entity/Starship.php
+++ b/src/Entity/Starship.php
@@ -48,9 +48,16 @@ class Starship
     #[ORM\OrderBy(['name' => 'ASC'])]
     private Collection $parts;
 
+    /**
+     * @var Collection<int, StarshipDroid>
+     */
+    #[ORM\OneToMany(targetEntity: StarshipDroid::class, mappedBy: 'starship')]
+    private Collection $starshipDroids;
+
     public function __construct()
     {
         $this->parts = new ArrayCollection();
+        $this->starshipDroids = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -218,4 +225,34 @@ class Starship
     {
         return implode(', ', $this->droids->map(fn(Droid $droid) => $droid->getName())->toArray());
     }
+
+    /**
+     * @return Collection<int, StarshipDroid>
+     */
+    public function getStarshipDroids(): Collection
+    {
+        return $this->starshipDroids;
+    }
+
+    public function addStarshipDroid(StarshipDroid $starshipDroid): static
+    {
+        if (!$this->starshipDroids->contains($starshipDroid)) {
+            $this->starshipDroids->add($starshipDroid);
+            $starshipDroid->setStarship($this);
+        }
+
+        return $this;
+    }
+
+    public function removeStarshipDroid(StarshipDroid $starshipDroid): static
+    {
+        if ($this->starshipDroids->removeElement($starshipDroid)) {
+            // set the owning side to null (unless already changed)
+            if ($starshipDroid->getStarship() === $this) {
+                $starshipDroid->setStarship(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/src/Entity/StarshipDroid.php b/src/Entity/StarshipDroid.php
new file mode 100644
index 0000000..0b427a3
--- /dev/null
+++ b/src/Entity/StarshipDroid.php
@@ -0,0 +1,67 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\StarshipDroidRepository;
+use Doctrine\ORM\Mapping as ORM;
+
+#[ORM\Entity(repositoryClass: StarshipDroidRepository::class)]
+class StarshipDroid
+{
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    private ?int $id = null;
+
+    #[ORM\Column]
+    private ?\DateTimeImmutable $assignedAt = null;
+
+    #[ORM\ManyToOne(inversedBy: 'starshipDroids')]
+    #[ORM\JoinColumn(nullable: false)]
+    private ?Droid $droid = null;
+
+    #[ORM\ManyToOne(inversedBy: 'starshipDroids')]
+    #[ORM\JoinColumn(nullable: false)]
+    private ?Starship $starship = null;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getAssignedAt(): ?\DateTimeImmutable
+    {
+        return $this->assignedAt;
+    }
+
+    public function setAssignedAt(\DateTimeImmutable $assignedAt): static
+    {
+        $this->assignedAt = $assignedAt;
+
+        return $this;
+    }
+
+    public function getDroid(): ?Droid
+    {
+        return $this->droid;
+    }
+
+    public function setDroid(?Droid $droid): static
+    {
+        $this->droid = $droid;
+
+        return $this;
+    }
+
+    public function getStarship(): ?Starship
+    {
+        return $this->starship;
+    }
+
+    public function setStarship(?Starship $starship): static
+    {
+        $this->starship = $starship;
+
+        return $this;
+    }
+}
diff --git a/src/Repository/StarshipDroidRepository.php b/src/Repository/StarshipDroidRepository.php
new file mode 100644
index 0000000..f9df4f0
--- /dev/null
+++ b/src/Repository/StarshipDroidRepository.php
@@ -0,0 +1,43 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\StarshipDroid;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<StarshipDroid>
+ */
+class StarshipDroidRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, StarshipDroid::class);
+    }
+
+    //    /**
+    //     * @return StarshipDroid[] Returns an array of StarshipDroid objects
+    //     */
+    //    public function findByExampleField($value): array
+    //    {
+    //        return $this->createQueryBuilder('s')
+    //            ->andWhere('s.exampleField = :val')
+    //            ->setParameter('val', $value)
+    //            ->orderBy('s.id', 'ASC')
+    //            ->setMaxResults(10)
+    //            ->getQuery()
+    //            ->getResult()
+    //        ;
+    //    }
+
+    //    public function findOneBySomeField($value): ?StarshipDroid
+    //    {
+    //        return $this->createQueryBuilder('s')
+    //            ->andWhere('s.exampleField = :val')
+    //            ->setParameter('val', $value)
+    //            ->getQuery()
+    //            ->getOneOrNullResult()
+    //        ;
+    //    }
+}
