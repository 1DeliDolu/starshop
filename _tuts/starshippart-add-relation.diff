diff --git a/migrations/Version20250306163930.php b/migrations/Version20250306163930.php
new file mode 100644
index 0000000..5637a13
--- /dev/null
+++ b/migrations/Version20250306163930.php
@@ -0,0 +1,35 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20250306163930 extends AbstractMigration
+{
+    public function getDescription(): string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema): void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->addSql('ALTER TABLE starship_part ADD starship_id INT NOT NULL');
+        $this->addSql('ALTER TABLE starship_part ADD CONSTRAINT FK_41C447379B24DF5 FOREIGN KEY (starship_id) REFERENCES starship (id) NOT DEFERRABLE INITIALLY IMMEDIATE');
+        $this->addSql('CREATE INDEX IDX_41C447379B24DF5 ON starship_part (starship_id)');
+    }
+
+    public function down(Schema $schema): void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->addSql('ALTER TABLE starship_part DROP CONSTRAINT FK_41C447379B24DF5');
+        $this->addSql('DROP INDEX IDX_41C447379B24DF5');
+        $this->addSql('ALTER TABLE starship_part DROP starship_id');
+    }
+}
diff --git a/src/Entity/Starship.php b/src/Entity/Starship.php
index 323ca40..d150913 100644
--- a/src/Entity/Starship.php
+++ b/src/Entity/Starship.php
@@ -3,6 +3,8 @@
 namespace App\Entity;
 
 use App\Repository\StarshipRepository;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
 use Doctrine\ORM\Mapping as ORM;
 use Gedmo\Mapping\Annotation\Slug;
 use Gedmo\Mapping\Annotation\Timestampable;
@@ -37,6 +39,17 @@ class Starship
     #[Slug(fields: ['name'])]
     private ?string $slug = null;
 
+    /**
+     * @var Collection<int, StarshipPart>
+     */
+    #[ORM\OneToMany(targetEntity: StarshipPart::class, mappedBy: 'starship')]
+    private Collection $parts;
+
+    public function __construct()
+    {
+        $this->parts = new ArrayCollection();
+    }
+
     public function getId(): ?int
     {
         return $this->id;
@@ -135,4 +148,34 @@ class Starship
 
         return $this;
     }
+
+    /**
+     * @return Collection<int, StarshipPart>
+     */
+    public function getParts(): Collection
+    {
+        return $this->parts;
+    }
+
+    public function addPart(StarshipPart $part): static
+    {
+        if (!$this->parts->contains($part)) {
+            $this->parts->add($part);
+            $part->setStarship($this);
+        }
+
+        return $this;
+    }
+
+    public function removePart(StarshipPart $part): static
+    {
+        if ($this->parts->removeElement($part)) {
+            // set the owning side to null (unless already changed)
+            if ($part->getStarship() === $this) {
+                $part->setStarship(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/src/Entity/StarshipPart.php b/src/Entity/StarshipPart.php
index c80f321..0cdf95c 100644
--- a/src/Entity/StarshipPart.php
+++ b/src/Entity/StarshipPart.php
@@ -26,6 +26,10 @@ class StarshipPart
     #[ORM\Column(type: Types::TEXT, nullable: true)]
     private ?string $notes = null;
 
+    #[ORM\ManyToOne(inversedBy: 'parts')]
+    #[ORM\JoinColumn(nullable: false)]
+    private ?Starship $starship = null;
+
     public function getId(): ?int
     {
         return $this->id;
@@ -66,4 +70,16 @@ class StarshipPart
 
         return $this;
     }
+
+    public function getStarship(): ?Starship
+    {
+        return $this->starship;
+    }
+
+    public function setStarship(?Starship $starship): static
+    {
+        $this->starship = $starship;
+
+        return $this;
+    }
 }
