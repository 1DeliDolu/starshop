WEBVTT

00:00:01.076 --> 00:00:05.476 align:middle
Cuando utilizamos make:entity para añadir una
relación, nos preguntó por orphanRemoval.

00:00:06.086 --> 00:00:08.336 align:middle
Es hora de averiguar qué
es y cuándo utilizarlo.

00:00:08.846 --> 00:00:14.666 align:middle
En los accesorios, empieza con $starshipPart
= StarshipPartFactory::createOne().

00:00:15.256 --> 00:00:20.536 align:middle
Para que destaque, lo convertiré en un elemento crucial
para cualquier viaje espacial: "Papel higiénico"

00:00:20.996 --> 00:00:23.476 align:middle
Sí, un guiño descarado a
los tiempos de la pandemia.

00:00:23.726 --> 00:00:26.456 align:middle
¡Qué asco! Asigna esta parte al Starship

00:00:26.456 --> 00:00:36.126 align:middle
anterior (añade el $ship = que falta) y luego vierte
$starshipPart: Hasta aquí, todo bien: nada del otro mundo.

00:00:36.686 --> 00:00:42.336 align:middle
Prueba a recargar los archivos fijos:
No hay errores y, por primera vez,

00:00:42.336 --> 00:00:44.766 align:middle
vemos ese objeto proxy que he mencionado.

00:00:45.376 --> 00:00:50.066 align:middle
Recuerda: cuando creas un objeto a través de
Foundry, te devuelve tu nuevo y brillante objeto,

00:00:50.066 --> 00:00:53.036 align:middle
pero está empaquetado dentro
de otro objeto llamado proxy.

00:00:53.496 --> 00:00:55.736 align:middle
La mayor parte del tiempo: no
te das cuenta ni te importa:

00:00:56.126 --> 00:00:59.836 align:middle
todas las llamadas a métodos del
proxy se reenvían al objeto real.

00:01:00.586 --> 00:01:04.956 align:middle
Pero como quiero dejar las cosas muy
claras, extrae el objeto real tanto de $ship

00:01:04.956 --> 00:01:12.966 align:middle
como de $starshipPart utilizando _real():
Ejecuta de nuevo las fijaciones: Y...

00:01:13.366 --> 00:01:14.246 align:middle
todo suave.

00:01:15.096 --> 00:01:19.026 align:middle
Sin el proxy, podemos ver que el
StarshipPart está efectivamente

00:01:19.026 --> 00:01:23.236 align:middle
vinculado al Starship correcto -el
USS Espresso- que creamos antes.

00:01:23.716 --> 00:01:25.556 align:middle
Hasta aquí, ¡todo en orden!

00:01:25.556 --> 00:01:28.546 align:middle
Pero, ¿y si necesitamos
eliminar un StarshipPart?

00:01:29.086 --> 00:01:29.626 align:middle
Normalmente,

00:01:29.626 --> 00:01:33.796 align:middle
diríamos $manager->remove($starshipPart),
luego $manager->flush().

00:01:34.216 --> 00:01:38.316 align:middle
Pero vamos a mezclar las cosas: vamos a
eliminar simplemente la pieza de su nave:

00:01:38.316 --> 00:01:43.136 align:middle
$ship->removePart($starshipPart):
¿Qué crees que ocurrirá?

00:01:43.426 --> 00:01:44.606 align:middle
¿Se borrará la pieza?

00:01:45.036 --> 00:01:46.506 align:middle
¿O simplemente la eliminará de la nave?

00:01:47.186 --> 00:01:51.316 align:middle
En ese caso, la pieza se quedará flotando
en el espacio, se convertirá en huérfana.

00:01:51.806 --> 00:01:57.866 align:middle
Pruébalo: Explota con nuestro
favorito: starship_id no puede ser nulo.

00:01:58.536 --> 00:01:59.666 align:middle
¿Por qué ocurre esto?

00:02:00.146 --> 00:02:03.236 align:middle
Cuando llamamos a removePart(),
establece Starship como nulo.

00:02:03.746 --> 00:02:09.336 align:middle
Pero hicimos que eso no estuviera permitido con
nullable: false: cada pieza debe pertenecer a una nave.

00:02:09.956 --> 00:02:11.096 align:middle
¿La solución?

00:02:11.496 --> 00:02:15.666 align:middle
Bueno, depende de lo que quieras: ¿queremos
permitir que las piezas queden huérfanas?

00:02:16.126 --> 00:02:20.636 align:middle
¡Genial! Cambia nullable a verdadero
en StarshipPart y haz una migración.

00:02:21.066 --> 00:02:23.836 align:middle
O tal vez, si una pieza se
retira repentinamente de su nave,

00:02:24.126 --> 00:02:26.836 align:middle
queremos eliminar esa pieza por
completo de la base de datos.

00:02:27.496 --> 00:02:29.866 align:middle
Tal vez el propietario de la nave no
sea un gran aficionado al reciclaje.

00:02:30.396 --> 00:02:37.096 align:middle
Para ello, dirígete a Starship y añade
orphanRemoval: true a OneToMany: Vuelve atrás

00:02:37.096 --> 00:02:41.636 align:middle
y recarga los accesorios:
¡No hay errores a la vista!

00:02:42.016 --> 00:02:45.696 align:middle
El ID es nulo porque se ha borrado
por completo de la base de datos.

00:02:46.286 --> 00:02:48.986 align:middle
Así que orphanRemoval
significa: Oye, si alguna

00:02:48.986 --> 00:02:52.426 align:middle
de estas piezas se queda
huérfana tírala al incinerador.

00:02:53.156 --> 00:02:56.736 align:middle
Próximo paso: exploraremos una forma
de controlar el orden de una relación,

00:02:57.146 --> 00:03:00.146 align:middle
como hacer que $ship->getParts()
devuelva alfabéticamente.
