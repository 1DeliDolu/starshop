WEBVTT

00:00:01.066 --> 00:00:03.806 align:middle
Ya tenemos naves estelares que aparecen
en la página de inicio gracias a

00:00:03.806 --> 00:00:06.676 align:middle
la entidad Starship que
construimos en el último tutorial.

00:00:07.196 --> 00:00:09.296 align:middle
Pero ahora ha llegado el momento de mejorar.

00:00:09.826 --> 00:00:13.166 align:middle
Necesitamos hacer un seguimiento de las piezas
individuales utilizadas en cada Starship.

00:00:13.796 --> 00:00:17.596 align:middle
Éste es el plan: cada parte
pertenecerá exactamente a un Starship,

00:00:17.596 --> 00:00:20.316 align:middle
y cada Starship tendrá muchas partes.

00:00:20.926 --> 00:00:24.596 align:middle
Pero antes de sumergirnos en las relaciones,
tenemos que empezar de forma sencilla:

00:00:25.086 --> 00:00:27.776 align:middle
¡necesitamos una nueva entidad para
llevar la cuenta de estas partes!

00:00:27.776 --> 00:00:33.556 align:middle
Enciende tu terminal, abre una nueva pestaña (ya que
nuestro servidor está zumbando en la otra), y ejecuta:

00:00:33.556 --> 00:00:39.896 align:middle
symfony console make:entity Llámala
StarshipPart, omite la emisión,

00:00:39.896 --> 00:00:43.826 align:middle
y dale unos cuantos campos:
name será una cadena y no será

00:00:44.206 --> 00:00:48.966 align:middle
anulable, price será un número entero (en
créditos, por supuesto), y tampoco será anulable.

00:00:49.486 --> 00:00:53.466 align:middle
Por último, añade un campo notes que será
de tipo text (por lo que puede ser más largo),

00:00:53.766 --> 00:00:55.096 align:middle
y será anulable.

00:00:55.796 --> 00:00:59.646 align:middle
Una vez que hayas añadido estos campos, crea
una nueva migración para la entidad copiando

00:00:59.646 --> 00:01:02.296 align:middle
y pegando symfony console make:migration.

00:01:02.296 --> 00:01:07.376 align:middle
Ahora, si compruebas tus migraciones,
verás sólo la nueva que hemos creado:

00:01:07.826 --> 00:01:10.446 align:middle
He limpiado las migraciones
antiguas del curso pasado.

00:01:10.656 --> 00:01:12.846 align:middle
Así que ésta es toda sobre StarshipPart.

00:01:13.526 --> 00:01:19.416 align:middle
Ejecútalo con: symfony console
doctrine:migrations:migrate ¡La tabla está

00:01:19.416 --> 00:01:20.706 align:middle
en la base de datos!

00:01:21.186 --> 00:01:26.406 align:middle
Pero hay dos campos que me gusta añadir a
todas mis entidades: createdAt y updatedAt.

00:01:27.066 --> 00:01:30.406 align:middle
Puedes verlos dentro de Starship,
bajo TimestampableEntity.

00:01:31.076 --> 00:01:33.876 align:middle
Cópialo y pégalo encima de StarshipPart.

00:01:34.566 --> 00:01:39.076 align:middle
Ambas propiedades se establecen automáticamente gracias
a una biblioteca que instalamos en el último tutorial.

00:01:39.656 --> 00:01:43.246 align:middle
Y como hemos añadido dos campos
nuevos, ¡necesitamos una migración!

00:01:43.246 --> 00:01:50.726 align:middle
symfony console make:migration Pues migra:
symfony console doctrine:migrations:migrate

00:01:50.726 --> 00:01:55.556 align:middle
En el último tutorial, utilizamos
una biblioteca genial llamada Foundry

00:01:55.556 --> 00:01:57.526 align:middle
para crear rápidamente un
montón de datos ficticios.

00:01:58.066 --> 00:02:00.086 align:middle
Vamos a hacer lo mismo con StarshipPart.

00:02:00.086 --> 00:02:05.166 align:middle
El paso 1 -ya que aún no tenemos una- es
generar una fábrica para la entidad con:

00:02:05.196 --> 00:02:13.986 align:middle
symfony console make:factory Compruébalo
en src/Factory/StarshipPartFactory.php.

00:02:13.986 --> 00:02:17.866 align:middle
Añade algunos valores por defecto para cada
campo, pero podemos hacerlo más interesante. En

00:02:18.426 --> 00:02:24.176 align:middle
la parte superior de StarshipPartFactory, pegaré
algo de código con partes de ejemplo (puedes cogerlo

00:02:24.176 --> 00:02:25.646 align:middle
del bloque de código de esta página).

00:02:25.796 --> 00:02:29.776 align:middle
Sustituye también el retorno en defaults()
por código que utilice esos datos.

00:02:29.866 --> 00:02:32.676 align:middle
Por último, utiliza esto en los accesorios.

00:02:33.056 --> 00:02:39.256 align:middle
En la parte inferior, crea 50 piezas aleatorias
utilizando StarshipPartFactory::createMany(50).

00:02:39.256 --> 00:02:45.026 align:middle
De nuevo en el terminal, ejecuta:
symfony console doctrine:fixtures:load

00:02:45.026 --> 00:02:49.076 align:middle
Y comprueba las nuevas piezas con:

00:02:49.576 --> 00:02:55.146 align:middle
symfony console doctrine:query:sql
Y luego select * from starship_part

00:02:56.216 --> 00:03:01.416 align:middle
Y con sólo unas pocas líneas de delicioso código,
tenemos 50 piezas aleatorias en la base de datos.

00:03:02.336 --> 00:03:05.906 align:middle
A continuación: empecemos a vincular
estas piezas a sus respectivas naves

00:03:06.236 --> 00:03:11.466 align:middle
creando nuestra primera relación: la
importantísima relación ManyToOne.
