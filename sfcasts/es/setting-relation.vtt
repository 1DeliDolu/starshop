WEBVTT

00:00:00.826 --> 00:00:03.436 align:middle
Vale, pero ¿cómo establecemos
realmente la relación?

00:00:03.926 --> 00:00:07.306 align:middle
¿Cómo decimos ¿Este StarshipPart
pertenece a este Starship?

00:00:07.786 --> 00:00:10.496 align:middle
Hasta ahora, hemos estado trabajando
en AppFixtures con Foundry.

00:00:10.966 --> 00:00:13.806 align:middle
Volveremos a Foundry dentro de un
rato, pero volvamos a la vieja escuela

00:00:13.806 --> 00:00:15.646 align:middle
por un minuto para ver
cómo funciona todo esto.

00:00:16.326 --> 00:00:17.646 align:middle
Empieza con new Starship()...

00:00:18.086 --> 00:00:20.686 align:middle
y luego pegaré algo de código para
establecer las propiedades necesarias.

00:00:21.246 --> 00:00:27.976 align:middle
Después añade $manager->persist($starship): A
continuación crea un nuevo StarshipPart y al igual que antes,

00:00:27.976 --> 00:00:29.866 align:middle
pegaré código para
rellenar las propiedades. A

00:00:30.626 --> 00:00:34.836 align:middle
continuación, asegúrate de que esto se guarda
con $manager->persist($part), y por último,

00:00:34.836 --> 00:00:39.486 align:middle
$manager->flush(): Foundry suele
llamar a persist() y flush() por nosotros.

00:00:39.786 --> 00:00:42.566 align:middle
Pero como estamos en modo manual,
tenemos que hacerlo nosotros.

00:00:43.016 --> 00:00:47.276 align:middle
Tenemos un Starship y un StarshipPart,
pero aún no están relacionados.

00:00:47.316 --> 00:00:48.896 align:middle
Pff, intenta cargar las
instalaciones de todas formas.

00:00:49.256 --> 00:00:55.266 align:middle
Dirígete a tu terminal y ejecuta: symfony
console doctrine:fixtures:load Rutro:

00:00:55.606 --> 00:00:58.936 align:middle
starship_id no puede ser nulo
en la tabla starship_part.

00:00:59.586 --> 00:01:01.166 align:middle
¿Por qué es necesaria esa columna?

00:01:01.716 --> 00:01:07.146 align:middle
En StarshipPart, la propiedad starship tiene
un atributo ManyToOne y otro JoinColumn():

00:01:07.686 --> 00:01:10.866 align:middle
Esto nos permite controlar la
columna de clave foránea: nullable:

00:01:10.866 --> 00:01:14.546 align:middle
falso significa que todo StarshipPart
debe pertenecer a un Starship.

00:01:15.016 --> 00:01:17.926 align:middle
Entonces, ¿cómo decimos que esta
parte pertenece a este Starship?

00:01:18.386 --> 00:01:20.566 align:middle
La respuesta es muy sencilla.

00:01:21.186 --> 00:01:26.436 align:middle
En cualquier lugar antes de flush(), di
$part->setStarship($starship): Eso es todo.

00:01:27.026 --> 00:01:30.166 align:middle
Con Doctrine, no estamos estableciendo
ninguna propiedad starship_id

00:01:30.396 --> 00:01:33.496 align:middle
ni siquiera pasando un ID,
como $starship->getId().

00:01:34.046 --> 00:01:36.106 align:middle
No Fijamos objetos.

00:01:36.686 --> 00:01:41.266 align:middle
Doctrine se encarga de los aburridos detalles
de la inserción: primero guarda el Starship,

00:01:41.606 --> 00:01:47.086 align:middle
luego utiliza su nuevo id para establecer la
columna starship_id en la tabla starship_part.

00:01:47.566 --> 00:01:53.696 align:middle
¡Qué listo! Prueba de nuevo
las fijaciones: ¡Sin errores!

00:01:54.186 --> 00:01:59.086 align:middle
Comprueba las cosas: symfony
console doctrine:query:sql 'SELECT *

00:01:59.356 --> 00:02:02.006 align:middle
FROM starship_part' ¡Et voila!

00:02:02.266 --> 00:02:06.156 align:middle
Ahí está nuestra pieza única,
felizmente vinculada a starship_id 75.

00:02:06.826 --> 00:02:11.496 align:middle
Compruébalo: symfony console
doctrine:query:sql 'SELECT * FROM starship

00:02:11.496 --> 00:02:18.396 align:middle
WHERE id = 75' Ahí está: Starship
id 75 tiene un StarshipPart id 1.

00:02:18.856 --> 00:02:19.986 align:middle
¡Somos geniales!

00:02:20.826 --> 00:02:26.046 align:middle
Estas son las conclusiones: con las relaciones
Doctrine, estás en el mundo de los objetos.

00:02:26.536 --> 00:02:27.636 align:middle
Olvídate de los ID.

00:02:27.846 --> 00:02:29.886 align:middle
Doctrine se encarga de esa parte por ti.

00:02:30.396 --> 00:02:32.896 align:middle
Tú fijas el objeto y Doctrine hace el resto.

00:02:33.456 --> 00:02:37.036 align:middle
Pero ugh, esto es mucho trabajo en AppFixtures

00:02:37.036 --> 00:02:39.786 align:middle
para crear un único Starship
y un único StarshipPart.

00:02:40.346 --> 00:02:45.056 align:middle
Así que, a continuación, volvamos a utilizar Foundry
para crear una flota de naves y un montón de piezas

00:02:45.396 --> 00:02:47.726 align:middle
y enlazarlas todas de una sola vez.

00:02:48.146 --> 00:02:50.136 align:middle
Aquí es donde Foundry brilla de verdad.
