WEBVTT

00:00:01.146 --> 00:00:03.926 align:middle
Dato curioso para tu próxima
fiesta de tacos Doctrine:

00:00:04.366 --> 00:00:07.096 align:middle
Toda relación puede verse
desde dos lados distintos.

00:00:07.566 --> 00:00:10.036 align:middle
Por ejemplo, Starship: tiene varias partes, lo

00:00:10.076 --> 00:00:13.436 align:middle
que la convierte en una relación de uno
a muchos desde la perspectiva de Starship.

00:00:14.106 --> 00:00:17.106 align:middle
Pero, dale la vuelta al telescopio
y mira desde el extremo StarshipPart

00:00:17.306 --> 00:00:19.386 align:middle
, y encontrarás una relación de muchos a uno.

00:00:19.926 --> 00:00:24.966 align:middle
Una de estas perspectivas se conoce siempre como
el lado propietario, y la otra, el lado inverso.

00:00:25.666 --> 00:00:28.706 align:middle
Ahora bien, puede que estés pensando ¿Por
qué me importa cómo se denominan los lados?

00:00:28.706 --> 00:00:30.466 align:middle
¡Tengo que ir a dar de comer a mi gato!

00:00:30.996 --> 00:00:34.386 align:middle
Dile a Mittens que se calme durante
tres minutos: esto podría ahorrarte

00:00:34.386 --> 00:00:35.806 align:middle
un gran dolor de cabeza más adelante...

00:00:36.076 --> 00:00:37.836 align:middle
y una comida completamente perdida.

00:00:38.496 --> 00:00:40.966 align:middle
En primer lugar, ¿qué lado es el propio?

00:00:41.426 --> 00:00:46.476 align:middle
Para un muchos-a-uno: siempre es el lado que tiene
el atributo ManyToOne, que está en la entidad

00:00:46.476 --> 00:00:48.096 align:middle
que tendrá la columna de clave foránea.

00:00:48.606 --> 00:00:50.106 align:middle
En nuestro caso, es StarshipPart.

00:00:50.686 --> 00:00:52.366 align:middle
Pero, ¿por qué es importante?

00:00:52.876 --> 00:00:53.596 align:middle
Por dos razones.

00:00:53.976 --> 00:00:57.006 align:middle
En primer lugar, el JoinColumn sólo
puede vivir en el lado propietario.

00:00:57.006 --> 00:01:00.536 align:middle
Y eso tiene sentido: controla
la columna de clave ajena.

00:01:01.176 --> 00:01:04.506 align:middle
En segundo lugar, sólo puede establecerse
en el lado propietario de la relación.

00:01:04.966 --> 00:01:08.416 align:middle
Deja que te lo muestre: Abre
src/DataFixtures/AppFixtures.php

00:01:08.416 --> 00:01:15.236 align:middle
y juguemos un poco: $starship =
StarshipFactory::createOne();.

00:01:15.886 --> 00:01:18.506 align:middle
Mi señor de la IA casi tenía razón.

00:01:19.126 --> 00:01:22.686 align:middle
Debajo de esto, espolvorearé código
que crea dos objetos StarshipPart,

00:01:22.926 --> 00:01:26.566 align:middle
los persiste y los vacía: Aún no
he establecido ninguna relación,

00:01:26.766 --> 00:01:29.156 align:middle
pero de todos modos carguemos
imprudentemente los accesorios:

00:01:29.656 --> 00:01:34.016 align:middle
symfony console doctrine:fixtures:load
Aparece nuestro error favorito

00:01:34.016 --> 00:01:37.796 align:middle
starship_id no puede ser
nulo Totalmente esperado.

00:01:38.426 --> 00:01:43.286 align:middle
Para demostrar la cuestión de la propiedad frente
a la inversa, añade _real() al final de $starship:

00:01:44.326 --> 00:01:47.296 align:middle
Cuando creas una entidad a través
de foundry, en realidad la envuelve

00:01:47.296 --> 00:01:49.506 align:middle
en un regalito llamado objeto proxy.

00:01:50.116 --> 00:01:54.336 align:middle
Esto no suele importar, pero ocasionalmente
puede causar cierta confusión.

00:01:54.906 --> 00:01:59.166 align:middle
Llamando a _real(), desenvolvemos el
proxy y obtenemos el objeto real Starship.

00:01:59.916 --> 00:02:02.036 align:middle
Es hora de conectar estas piezas a la nave.

00:02:02.446 --> 00:02:02.826 align:middle
Normalmente,

00:02:02.826 --> 00:02:07.566 align:middle
diríamos $part1->setStarship($starship);,
que establece el lado propio.

00:02:08.096 --> 00:02:10.046 align:middle
Esta vez intenta establecer el lado inverso.

00:02:10.926 --> 00:02:15.966 align:middle
Serían $starship->addPart($part1);
y $starship->addPart($part2);:

00:02:16.686 --> 00:02:19.526 align:middle
Basándome en lo que acabo de
explicar, esto no debería funcionar

00:02:19.526 --> 00:02:21.906 align:middle
porque sólo estamos fijando el lado inverso.

00:02:22.376 --> 00:02:27.736 align:middle
Pero, de todos modos, tiremos los dados y carguemos
los accesorios: Pero, ¡sorpresa, sorpresa!

00:02:27.956 --> 00:02:29.056 align:middle
No hay errores.

00:02:29.586 --> 00:02:34.146 align:middle
De hecho, si compruebas la base de datos
symfony console doctrine:query:sql "SELECT *

00:02:34.386 --> 00:02:39.596 align:middle
FROM starship_part" Efectivamente, tenemos dos piezas
nuevas, cada una relacionada con una nave estelar.

00:02:40.286 --> 00:02:41.066 align:middle
Entonces, ¿qué pasa?

00:02:41.286 --> 00:02:43.746 align:middle
Acabamos de establecer el
lado inverso de la relación,

00:02:44.156 --> 00:02:45.966 align:middle
y aún así se ha guardado en la base de datos.

00:02:46.506 --> 00:02:48.446 align:middle
¡Eso es lo contrario de
lo que acabo de decirte!

00:02:48.446 --> 00:02:53.436 align:middle
Abre la entidad Starship y busca
el método addPart(): ¡Ajá!

00:02:53.886 --> 00:02:56.946 align:middle
Este método llama a
$part->setStarship($this);.

00:02:57.596 --> 00:02:59.366 align:middle
Establece el lado propio.

00:02:59.926 --> 00:03:03.316 align:middle
Cuando fijamos el lado inverso,
nuestro propio código generado

00:03:03.316 --> 00:03:06.636 align:middle
por el comando make:entity
también fija el lado propio.

00:03:07.216 --> 00:03:08.146 align:middle
Chica lista, ¿eh?

00:03:08.146 --> 00:03:10.676 align:middle
## Propietario vs Inverso vs Me da igual
Así que esto es lo que hay que saber:

00:03:10.676 --> 00:03:13.556 align:middle
toda relación tiene un lado
propio y un lado inverso.

00:03:14.076 --> 00:03:15.466 align:middle
El lado inverso es opcional.

00:03:16.096 --> 00:03:19.926 align:middle
make:entity nos preguntó si queríamos
generar el lado inverso, y dijimos que sí.

00:03:20.416 --> 00:03:23.596 align:middle
Eso nos dio el método
superconveniente $ship->getParts().

00:03:24.066 --> 00:03:28.626 align:middle
Así que sí, técnicamente, sólo puedes establecer
la relación desde el lado propietario (es decir,

00:03:28.706 --> 00:03:33.426 align:middle
$starshipPart->setShip() ) , pero en la práctica,
puedes establecerla desde cualquier lado gracias

00:03:33.426 --> 00:03:36.066 align:middle
a nuestro propio código
que sincroniza ambos lados.

00:03:36.546 --> 00:03:40.276 align:middle
Así que asombra a tus amigos con tus
nuevos conocimientos y luego olvídate

00:03:40.276 --> 00:03:42.516 align:middle
de ello: no es importante en la práctica.

00:03:43.326 --> 00:03:45.176 align:middle
Limpia aquí nuestro código
temporal y refresca las cosas

00:03:45.176 --> 00:03:49.296 align:middle
recargando los accesorios: Muy bien,
a continuación: orphanRemoval.

00:03:49.716 --> 00:03:51.526 align:middle
No es tan malo como parece.
