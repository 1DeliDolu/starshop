WEBVTT

00:00:01.086 --> 00:00:03.686 align:middle
Tenemos este método superútil
$ship->getParts():

00:00:04.036 --> 00:00:06.046 align:middle
nos devuelve todas las piezas
para nuestra nave estelar.

00:00:06.646 --> 00:00:10.746 align:middle
Pero el año fiscal está llegando a su fin
y tenemos que planificar nuestro presupuesto.

00:00:11.246 --> 00:00:15.046 align:middle
Aburrido, pero necesario:
¡nuestros jefes ferengis lo exigen!

00:00:15.726 --> 00:00:19.966 align:middle
La mayoría de las piezas son baratas, como las tuercas, los
tornillos y la cinta aislante que lo mantienen todo unido.

00:00:20.466 --> 00:00:22.076 align:middle
Eso no nos preocupa.

00:00:22.556 --> 00:00:27.726 align:middle
En cambio, quiero devolver rápidamente todas las piezas
de nuestra nave que cuesten más de 50.000 créditos.

00:00:28.346 --> 00:00:32.506 align:middle
Claro, podríamos hacer una nueva consulta en
nuestro controlador para todas las piezas de la

00:00:32.506 --> 00:00:35.236 align:middle
nave estelar relacionadas con la nave
cuyo precio sea superior a 50.000.

00:00:35.476 --> 00:00:36.736 align:middle
Pero, ¿dónde está la gracia en eso?

00:00:37.136 --> 00:00:40.036 align:middle
Quiero seguir con nuestro atajo
fácil de $ship->getParts().

00:00:40.546 --> 00:00:41.686 align:middle
¿Es posible?

00:00:42.116 --> 00:00:44.696 align:middle
Entra en la clase Starship y
busca el método getParts().

00:00:45.296 --> 00:00:50.576 align:middle
Cópialo, pégalo abajo y cámbiale
el nombre a getExpensiveParts().

00:00:51.146 --> 00:00:55.426 align:middle
Por ahora, devuélvelo todo: De vuelta en nuestra
plantilla de programa, dale una vuelta a esto.

00:00:55.856 --> 00:00:59.796 align:middle
Cambia parts por expensiveParts: No
hay ninguna propiedad expensiveParts,

00:01:00.056 --> 00:01:03.576 align:middle
pero esto llamará al método
getExpensiveParts() que acabamos de crear.

00:01:04.126 --> 00:01:07.076 align:middle
Es hora de hacer que nuestro método
devuelva sólo las partes caras.

00:01:07.606 --> 00:01:09.996 align:middle
Recuerda: $this->parts
no es una matriz, sino

00:01:10.206 --> 00:01:13.306 align:middle
un objeto Colección especial
con algunos trucos en la manga.

00:01:13.856 --> 00:01:15.526 align:middle
Uno de ellos es el método filter().

00:01:16.026 --> 00:01:17.976 align:middle
Éste ejecuta una llamada
de retorno por cada parte.

00:01:18.396 --> 00:01:21.666 align:middle
Si devolvemos verdadero, incluye
esa parte en la colección final.

00:01:22.136 --> 00:01:24.536 align:middle
Si devolvemos false, la filtra.

00:01:25.246 --> 00:01:30.496 align:middle
Así que podemos decir return
$part->getPrice() > 50000;: ¡Listo!

00:01:31.006 --> 00:01:34.326 align:middle
Excepto que... esto es súper ineficiente.

00:01:34.846 --> 00:01:40.176 align:middle
Seguimos buscando todas las piezas relacionadas
con nuestra nave y filtrándolas en PHP.

00:01:40.176 --> 00:01:44.796 align:middle
Imagina que tuviéramos 50.000 piezas, pero
sólo 10 de ellas costaran más de 50.000.

00:01:45.126 --> 00:01:46.526 align:middle
¡Menudo despilfarro!

00:01:47.106 --> 00:01:52.006 align:middle
¿Podemos pedirle a Doctrine que cambie la consulta para
que sólo coja las piezas relacionadas con la nave estelar

00:01:52.126 --> 00:01:54.226 align:middle
cuyo precio sea superior a 50.000?

00:01:54.766 --> 00:01:56.926 align:middle
Entra en el objeto Criteria.

00:01:57.326 --> 00:01:58.936 align:middle
Esta cosa es poderosa.

00:01:59.396 --> 00:02:01.766 align:middle
Aunque, lo admito, también un poco críptico.

00:02:02.286 --> 00:02:05.126 align:middle
Elimina nuestra lógica y utiliza
en su lugar $criteria igual a

00:02:05.126 --> 00:02:13.066 align:middle
Criteria::create()->andWhere(Criteria::expr()->gt('price',
50000)).

00:02:14.146 --> 00:02:18.216 align:middle
Para utilizar esto, return
$this->parts->matching($criteria);: Ahora bien, si

00:02:18.216 --> 00:02:22.866 align:middle
me conoces, sabes que me gusta mantener mi lógica de
consulta organizada en mis clases repositorio. Pero

00:02:23.496 --> 00:02:25.866 align:middle
ahora tenemos algo de lógica de
consulta dentro de nuestra entidad. ¿Es

00:02:26.296 --> 00:02:27.466 align:middle
eso malo? No

00:02:27.856 --> 00:02:30.566 align:middle
necesariamente, pero me gusta
mantener las cosas ordenadas. Así que

00:02:30.866 --> 00:02:33.636 align:middle
traslademos esta lógica de
Criteria a nuestro repositorio.

00:02:34.096 --> 00:02:36.436 align:middle
Vamos a StarshipPartRepository.
En cualquier lugar

00:02:36.896 --> 00:02:43.206 align:middle
de aquí, añade una función estática pública:
createExpensiveCriteria(): ¿Por qué estática? Por dos

00:02:43.626 --> 00:02:48.896 align:middle
razones: una, porque podemos (no estamos utilizando
la variable this en ningún lugar de dentro), y

00:02:49.356 --> 00:02:52.726 align:middle
dos, porque vamos a utilizar este
método desde la entidad Starship y

00:02:52.726 --> 00:02:57.106 align:middle
no podemos autocablear servicios en entidades,
así que debe ser estático. De vuelta

00:02:57.826 --> 00:02:59.936 align:middle
en Starship, utiliza esto. Elimina

00:03:00.486 --> 00:03:03.506 align:middle
por completo la entidad
Criteria y sustitúyela por

00:03:03.506 --> 00:03:12.626 align:middle
StarshipPartRepository::createExpensiveCriteria(): Todo
sigue funcionando a las mil maravillas, así que demos

00:03:12.976 --> 00:03:15.596 align:middle
un paso más y flexionemos nuestros
músculos de desarrolladores. Creemos

00:03:16.126 --> 00:03:19.266 align:middle
un método que combine Criteria
con QueryBuilder s . Digamos

00:03:19.926 --> 00:03:22.996 align:middle
que queremos obtener una lista de todas las
piezas caras de cualquier Starship. Empieza

00:03:22.996 --> 00:03:25.976 align:middle
copiando el método getExpensiveParts()
de Starship. Pégalo

00:03:26.156 --> 00:03:28.226 align:middle
en StarshipPartRepository. Luego devuelve

00:03:29.386 --> 00:03:31.556 align:middle
$this->createQueryBuilder('sp'). Añade un

00:03:31.556 --> 00:03:35.426 align:middle
argumento$limit, por defecto 10. Para combinar

00:03:35.796 --> 00:03:41.686 align:middle
esto con un Criteria, di
addCriteria(self::createExpensiveCriteria()). Ahora que

00:03:42.406 --> 00:03:47.576 align:middle
estamos en un QueryBuilder, podemos hacer las cosas
normales, como setMaxResults($limit). ¿Quieres

00:03:48.016 --> 00:03:50.016 align:middle
hacer un orderBy o un andWhere? Adelante.

00:03:50.286 --> 00:03:51.046 align:middle
Y por

00:03:51.276 --> 00:03:56.346 align:middle
supuesto, puedes terminar esto con getQuery()->getResult():
Combinar Criteria con Constructores de Consultas

00:03:56.946 --> 00:03:58.326 align:middle
es una jugada poderosa. Muy bien, ya está

00:03:58.326 --> 00:03:59.406 align:middle
bien. A continuación,

00:03:59.406 --> 00:04:02.466 align:middle
crearemos una página completamente
nueva para listar todas las piezas. ¡

00:04:02.496 --> 00:04:03.396 align:middle
Vamos camino de necesitar algunos JOINs!
