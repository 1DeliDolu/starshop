WEBVTT

00:00:01.086 --> 00:00:04.976 align:middle
¿Recuerdas en AppFixtures cuando asignábamos
manualmente un Droid a un Starship?

00:00:05.226 --> 00:00:05.856 align:middle
¡Aquello era divertido!

00:00:06.086 --> 00:00:11.046 align:middle
Pero ahora, quiero crear un ejército de droids,
una flota de starships y asignarlos todos a la vez.

00:00:11.046 --> 00:00:15.296 align:middle
Deshazte de esas asignaciones manuales
de Droid y Starship en AppFixtures.

00:00:15.296 --> 00:00:21.546 align:middle
Acércate a la parte inferior
donde creamos starships y parts.

00:00:21.546 --> 00:00:26.196 align:middle
Ahora también necesitamos un montón
de droids:DroidFactory::createMany(100).

00:00:29.886 --> 00:00:35.496 align:middle
Abajo, asigna droids a
DroidFactory::randomRange(1, 5):

00:00:35.496 --> 00:00:39.286 align:middle
Esto asignará entre 1 y 5 droids
aleatorios a cada Starship.

00:00:39.956 --> 00:00:44.466 align:middle
Tal vez te hayas dado cuenta de algo: aquí estamos
estableciendo una propiedad droids, ¡pero en Starship,

00:00:44.466 --> 00:00:46.676 align:middle
no tenemos un método setDroids()!

00:00:47.196 --> 00:00:49.326 align:middle
Normalmente, esto provocaría un error furioso.

00:00:49.826 --> 00:00:51.246 align:middle
Pero ¡funcionará!

00:00:51.246 --> 00:00:53.656 align:middle
Foundry ve que tenemos un método addDroid()

00:00:53.656 --> 00:00:57.366 align:middle
, y lo llama en su lugar,
uno a uno para cada Droid.

00:00:57.366 --> 00:00:58.996 align:middle
¡Es hora de ver esto en acción!

00:00:58.996 --> 00:01:04.156 align:middle
Busca tu terminal y ejecuta: symfony console
doctrine:fixtures:load ¿No hay errores?

00:01:04.616 --> 00:01:07.336 align:middle
Yo también estoy un poco
sorprendido, ejem, encantado.

00:01:08.516 --> 00:01:13.056 align:middle
Echa un vistazo a droids con: symfony
console doctrine:query:sql 'SELECT *

00:01:13.296 --> 00:01:18.456 align:middle
FROM droid' 100 droides alocados y adorables.

00:01:22.146 --> 00:01:26.696 align:middle
Echa también un vistazo a la tabla starship_droid:
Debería parecer que hay un conjunto aleatorio

00:01:26.696 --> 00:01:29.326 align:middle
de droides asignado a cada
starship Pero espera un momento.

00:01:29.646 --> 00:01:33.776 align:middle
Estos droides "aleatorios" -¿has
notado mis comillas sarcásticas?

00:01:33.956 --> 00:01:35.156 align:middle
- ¡no son aleatorios en absoluto!

00:01:35.636 --> 00:01:38.166 align:middle
Son los 3 mismos droides una y otra vez.

00:01:38.166 --> 00:01:43.936 align:middle
El problema es que randomRange(1, 5) sólo se llama
una vez: así que está asignando los mismos 1

00:01:43.936 --> 00:01:46.276 align:middle
a 5 droides aleatorios a cada Starship.

00:01:46.826 --> 00:01:49.046 align:middle
No es la variedad que esperábamos.

00:01:49.256 --> 00:01:56.656 align:middle
Arréglalo pasando un cierre:
StarshipFactory::createMany(), 100, fn () =>

00:01:56.776 --> 00:02:00.556 align:middle
[ 'droids' =>
DroidFactory::randomRange(1, 5)]):

00:02:00.806 --> 00:02:05.546 align:middle
Foundry ejecutará la llamada
de retorno para las 100 naves.

00:02:05.546 --> 00:02:09.256 align:middle
Esto significa que randomRange(1,
5) se llamará 100 veces, lo

00:02:09.416 --> 00:02:12.086 align:middle
que nos dará un rango realmente
aleatorio para cada nave.

00:02:13.486 --> 00:02:14.206 align:middle
¡Pruébalo!

00:02:14.706 --> 00:02:19.116 align:middle
Vuelve a ejecutar las fijaciones y carga
la consulta SQL: Disfruta de la gloria

00:02:19.116 --> 00:02:22.066 align:middle
de un conjunto de droides asignados a
naves estelares realmente aleatorio.

00:02:22.066 --> 00:02:26.786 align:middle
También podríamos haber arreglado
esto moviendo la clave droids

00:02:26.786 --> 00:02:29.816 align:middle
a StarshipFactory en el método defaults().

00:02:31.416 --> 00:02:34.076 align:middle
Pero me gusta conservar defaults()
para las propiedades necesarias.

00:02:34.076 --> 00:02:39.006 align:middle
Y como droids no son técnicamente necesarias
-¡buena suerte limpiando el baño sin ellas!

00:02:39.556 --> 00:02:43.216 align:middle
- Me gusta mantenerlas fuera de defaults() y
establecerlas donde utilicemos StarshipFactory.

00:02:43.216 --> 00:02:48.236 align:middle
A continuación, aprenderemos a hacer
JOIN entre relaciones ManyToMany.

00:02:48.236 --> 00:02:52.396 align:middle
Una vez más, Doctrine se encarga
del trabajo pesado por nosotros.
