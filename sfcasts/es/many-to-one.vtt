WEBVTT

00:00:01.066 --> 00:00:06.786 align:middle
Muy bien amigos, hemos construido con éxito
las entidades Starship y StarshipPart, y...

00:00:06.786 --> 00:00:08.576 align:middle
están bien colocadas en la base de datos.

00:00:09.016 --> 00:00:13.816 align:middle
Pero he aquí el enigma: ¿cómo unimos estas
piezas a sus respectivas naves estelares?

00:00:14.326 --> 00:00:17.996 align:middle
¿Cómo damos a cada StarshipPart
su legítimo hogar Starship?

00:00:18.586 --> 00:00:21.496 align:middle
Ahí es donde nuestro fiel comando
make:entity vuelve a entrar en juego.

00:00:21.886 --> 00:00:23.626 align:middle
Qué fanfarrón.

00:00:23.626 --> 00:00:27.966 align:middle
Busca tu terminal y ejecútalo: symfony console
make:entity Ahora bien, si estás pensando

00:00:27.966 --> 00:00:33.026 align:middle
en términos tradicionales de base de datos, puede
que te imagines una columna starship_id apareciendo

00:00:33.026 --> 00:00:34.566 align:middle
en tu tabla starship_part.

00:00:34.986 --> 00:00:38.096 align:middle
Y así será, pero en
Doctrine no pensamos así.

00:00:38.096 --> 00:00:41.146 align:middle
En lugar de eso, nos centramos
en relacionar objetos.

00:00:41.146 --> 00:00:45.506 align:middle
Así que actualiza la entidad StarshipPart
para añadir un campo para Starship.

00:00:45.506 --> 00:00:49.606 align:middle
Así que, a la hora de nombrar el
campo, no lo llames starshipId.

00:00:50.116 --> 00:00:54.066 align:middle
Doctrine quiere que pensemos en
términos de clases y objetos.

00:00:54.066 --> 00:00:56.206 align:middle
Y como un StarshipPart pertenecerá

00:00:56.206 --> 00:01:00.196 align:middle
a un Starship dale a la entidad
StarshipPart una propiedad starship.

00:01:00.196 --> 00:01:03.936 align:middle
Para el tipo de campo, utiliza un
tipo falso llamado "relación".

00:01:04.376 --> 00:01:05.576 align:middle
¡Esto pone en marcha un asistente!

00:01:06.226 --> 00:01:08.336 align:middle
¿Con qué clase estamos relacionando?

00:01:08.336 --> 00:01:10.236 align:middle
Dilo conmigo: Starship.

00:01:11.096 --> 00:01:14.606 align:middle
El asistente nos guía a través de los
cuatro tipos diferentes de relaciones.

00:01:15.086 --> 00:01:20.376 align:middle
Comprueba las descripciones: queremos un ManyToOne
en el que cada parte pertenezca a un Starship,

00:01:20.636 --> 00:01:22.766 align:middle
y cada Starship puede tener muchas partes.

00:01:23.926 --> 00:01:27.406 align:middle
Cuando se nos pregunte si la propiedad
starship puede ser nula, diremos "no".

00:01:27.726 --> 00:01:32.616 align:middle
Queremos que cada parte pertenezca a una
nave: no se permiten partes flotantes al azar.

00:01:33.186 --> 00:01:38.946 align:middle
A continuación, el asistente hace una pregunta interesante:
¿Queremos añadir una nueva propiedad a Starship

00:01:39.156 --> 00:01:42.316 align:middle
que nos permita decir
$starship->getParts() ?

00:01:42.856 --> 00:01:46.216 align:middle
Esto es totalmente opcional,
pero estaría bien disponer

00:01:46.216 --> 00:01:48.676 align:middle
de una forma tan sencilla de obtener
todas las piezas de una nave.

00:01:49.226 --> 00:01:50.646 align:middle
Además, no tiene inconveniente.

00:01:50.886 --> 00:01:52.516 align:middle
Así que esto es un "sí" para mí, amigo.

00:01:53.266 --> 00:01:55.716 align:middle
Llama a la propiedad parts: breve y dulce.

00:01:55.716 --> 00:01:58.266 align:middle
Para la eliminación de huérfanos, di "no".

00:01:58.526 --> 00:01:59.806 align:middle
Ya hablaremos de eso más adelante.

00:02:00.246 --> 00:02:01.426 align:middle
Pulsa intro para terminar.

00:02:01.866 --> 00:02:08.346 align:middle
He confirmado antes de grabar, así que comprobaré
los cambios con: git status Vaya, vaya, vaya.

00:02:08.346 --> 00:02:10.646 align:middle
¡Parece que ambas entidades
se han actualizado!

00:02:11.186 --> 00:02:14.166 align:middle
En StarshipPart, tenemos una
nueva propiedad starship.

00:02:14.706 --> 00:02:21.716 align:middle
Pero en lugar de ORM\Column, es ORM\ManyToOne
y su valor será un objeto Starship.

00:02:22.266 --> 00:02:27.366 align:middle
También tenemos nuevos métodos
getStarship() y setStarship(): En Starship

00:02:27.366 --> 00:02:30.936 align:middle
, tenemos una nueva propiedad
parts con ORM\OneToMany.

00:02:31.616 --> 00:02:34.306 align:middle
Desplazándonos hacia abajo, vemos
un práctico método getParts().

00:02:34.716 --> 00:02:39.406 align:middle
Pero en lugar de setParts(), nos han regalado
los métodos addPart() y removePart():

00:02:39.846 --> 00:02:43.296 align:middle
Estos te serán útiles cuando trabajes
con Foundry, el sistema de formularios

00:02:43.616 --> 00:02:46.506 align:middle
o si estás construyendo una API
con el serializador de Symfony.

00:02:47.256 --> 00:02:53.546 align:middle
En el constructor, añade $this->parts = new
ArrayCollection(): Este es un detalle que necesitamos,

00:02:53.656 --> 00:02:59.206 align:middle
pero no es superimportante: ArrayCollection es
un objeto que parece y actúa como un array,

00:02:59.686 --> 00:03:03.576 align:middle
lo que significa que podemos foreach sobre
él o hacer otras cosas parecidas a un array.

00:03:04.126 --> 00:03:06.386 align:middle
Ah, y si lo piensas OneToMany

00:03:06.386 --> 00:03:10.386 align:middle
y ManyToOne son en realidad dos
vistas de la misma relación.

00:03:10.386 --> 00:03:14.846 align:middle
Si una parte pertenece a una nave estelar,
entonces una nave estelar tiene muchas partes.

00:03:15.416 --> 00:03:19.766 align:middle
Hemos añadido una relación, pero podemos
verla desde dos perspectivas distintas.

00:03:19.766 --> 00:03:21.486 align:middle
Pero aún no hemos terminado.

00:03:22.026 --> 00:03:26.196 align:middle
Como make:entity ha añadido nuevas propiedades, seguro
que tenemos que actualizar nuestra base de datos.

00:03:26.786 --> 00:03:31.286 align:middle
Crea una migración: symfony
console make:migration Ésta es una

00:03:31.286 --> 00:03:33.206 align:middle
de mis migraciones favoritas.

00:03:33.716 --> 00:03:39.186 align:middle
Altera starship_part para añadir una columna
starship_id, que es una clave foránea sobre starship.

00:03:39.786 --> 00:03:42.916 align:middle
Esto ocurrió porque Doctrine es un sabelotodo.

00:03:42.916 --> 00:03:45.346 align:middle
Añadimos una propiedad
starship a StarshipPart,

00:03:45.886 --> 00:03:48.736 align:middle
pero Doctrine sabía que la columna
debía llamarse starship_id.

00:03:48.736 --> 00:03:53.306 align:middle
Incluso nos ayudará a establecerlo,
como veremos en el próximo capítulo.

00:03:53.926 --> 00:04:00.556 align:middle
Vamos a migrar: symfony console
doctrine:migrations:migrate ¡Explota!

00:04:00.856 --> 00:04:04.266 align:middle
La columna "starship_id" de la tabla
"starship_part" no puede ser nula.

00:04:04.896 --> 00:04:07.166 align:middle
¿Recuerdas la tabla starship_part?

00:04:07.686 --> 00:04:09.906 align:middle
¡Ya tiene 50 filas!

00:04:10.626 --> 00:04:15.036 align:middle
La migración intenta añadir una nueva
columna starship_id y establecerla en null.

00:04:15.656 --> 00:04:18.096 align:middle
Pero eso no está permitido,
gracias a la nullable: false.

00:04:18.796 --> 00:04:24.776 align:middle
Borra esas 50 filas con: symfony console
doctrine:query:sql "DELETE FROM starship_part"

00:04:25.056 --> 00:04:29.676 align:middle
Y vuelve a ejecutar la migración:
Entonces, ¿cómo hacemos

00:04:29.676 --> 00:04:32.746 align:middle
para vincular un objeto
StarshipPart con su Starship ?

00:04:33.226 --> 00:04:35.046 align:middle
Abróchate el cinturón,
¡porque eso a continuación!
