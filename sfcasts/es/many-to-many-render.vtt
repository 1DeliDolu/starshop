WEBVTT

00:00:00.036 --> 00:00:04.916 align:middle
Objetivo realmente sencillo: imprimir
todos los droides asignados a un Starship.

00:00:04.916 --> 00:00:08.766 align:middle
Si te has sentido cómodo con la
relación OneToMany de Starship

00:00:08.766 --> 00:00:12.006 align:middle
a sus partes, ¡esto te va a encantar!

00:00:12.006 --> 00:00:16.936 align:middle
Abre la plantilla de la página de presentación
Starship: templates/starship/show.html.twig.

00:00:17.606 --> 00:00:25.206 align:middle
Robaré las etiquetas h4 y p para arrived at,
las pegaré abajo, y cambiaré la h4 por Droids.

00:00:26.486 --> 00:00:27.796 align:middle
Borra arrived at...

00:00:27.796 --> 00:00:32.616 align:middle
y rompe esa línea: Tenemos una variable
ship, que es un objeto Starship.

00:00:33.086 --> 00:00:36.726 align:middle
Y recuerda que tiene una propiedad
droids y un método getDroids().

00:00:36.726 --> 00:00:40.356 align:middle
Así que, para droid in ship.droids.

00:00:41.016 --> 00:00:46.196 align:middle
Esto llama al método getDroids(), y eso
devuelve una colección de objetos Droid.

00:00:46.196 --> 00:00:48.536 align:middle
Así que podemos decir {{ droid.name }}.

00:00:49.496 --> 00:00:51.976 align:middle
Quiero comas, pero no una
coma de más al final.

00:00:51.976 --> 00:00:56.526 align:middle
Di: {% if not loop.last %}, {% endif %}.

00:00:56.526 --> 00:00:59.336 align:middle
Hay formas más elegantes de hacerlo,
pero de momento hazlo sencillo.

00:00:59.946 --> 00:01:06.206 align:middle
Si no hay droides, utiliza una etiqueta else y
di No droids on board (clean up your own mess).

00:01:06.426 --> 00:01:16.676 align:middle
¡Grosero! En la página de inicio,
también queremos mostrar los droides.

00:01:17.276 --> 00:01:20.806 align:middle
Abre la plantilla:
templates/main/homepage.html.twig.

00:01:21.456 --> 00:01:28.006 align:middle
Justo después de parts, añade otro div
con Droids: {{ ship.droidNames ?: 'none' }}:

00:01:29.126 --> 00:01:34.106 align:middle
Podríamos volver a usar nuestra coma de loop.last
, pero necesitamos los nombres de los droides en dos

00:01:34.106 --> 00:01:37.206 align:middle
sitios, así que vamos a añadir un método
inteligente para esto en la clase Starship

00:01:37.496 --> 00:01:40.916 align:middle
. Esto podría ir en cualquier sitio,
pero lo pondré al final con los otros

00:01:41.356 --> 00:01:44.106 align:middle
métodos de droides. Crea una
función pública getDroidNames():

00:01:44.796 --> 00:01:50.326 align:middle
cadena. Para devolver una cadena de nombres de droides
separados por comas, mira esto: return implode(',

00:01:54.896 --> 00:02:01.796 align:middle
', $this->droids->map(fn(Droide
$droid) =>

00:02:02.646 --> 00:02:04.186 align:middle
$droid->getName())->toArray()):
Vaya, ¡qué

00:02:07.826 --> 00:02:11.996 align:middle
bocado! Vamos a desglosarlo: Primero, $this->droids
es nuestra colección de objetos Droid.

00:02:11.996 --> 00:02:15.196 align:middle
Segundo , map() aplica una
función a cada Droid de la

00:02:15.196 --> 00:02:19.426 align:middle
colección. Tercero, fn(Droid $droid) =>
$droid->getName() es una forma hipster de

00:02:19.426 --> 00:02:23.316 align:middle
decir: Dame el nombre de cada droide Cuarto,
toArray() convierte la colección en una

00:02:23.316 --> 00:02:24.896 align:middle
matriz para poder utilizarla con

00:02:24.996 --> 00:02:27.016 align:middle
implode(). Por último, implode(', ',

00:02:27.176 --> 00:02:30.126 align:middle
...) toma esa matriz de nombres y la
convierte en una cadena separada por comas

00:02:30.126 --> 00:02:35.306 align:middle
. Ahora que tenemos un método getDroidNames(),
podemos decir {{ ship.droidNames ?: 'none'

00:02:36.026 --> 00:02:36.596 align:middle
}}. ¡

00:02:36.956 --> 00:02:37.526 align:middle
Ya está!

00:02:37.886 --> 00:02:40.136 align:middle
Actualiza... y disfruta de los nombres
de los droides en la página de inicio. 

00:02:40.956 --> 00:02:44.836 align:middle
A continuación: utilicemos Foundry
para establecer la relación ManyToMany en los accesorios.

00:02:45.186 --> 00:02:47.066 align:middle
¡Otro lugar en el que brilla Foundry!
