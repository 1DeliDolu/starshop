WEBVTT

00:00:01.076 --> 00:00:05.496 align:middle
Navega hasta la página de inicio y haz clic en
cualquiera de las naves estelares con estado "En curso".

00:00:06.756 --> 00:00:08.906 align:middle
Ya estamos listando las piezas...

00:00:09.336 --> 00:00:09.926 align:middle
más o menos...

00:00:10.206 --> 00:00:11.746 align:middle
¡están todas codificadas!

00:00:12.426 --> 00:00:15.386 align:middle
Ahora, ¿cómo obtenemos las
piezas relacionadas con esta nave?

00:00:16.046 --> 00:00:21.046 align:middle
Abre el controlador de esta página:
src/Controller/StarshipController.php Para consultar

00:00:21.046 --> 00:00:24.346 align:middle
las piezas, lo normal es que hagamos
un autocable a StarshipPartRepository.

00:00:24.826 --> 00:00:30.286 align:middle
Empieza de la misma manera aquí con un
argumento StarshipPartRepository $partRepository:

00:00:30.286 --> 00:00:35.726 align:middle
A continuación, establece $parts, en
$partRepository->findBy(): Esto es bastante estándar:

00:00:35.726 --> 00:00:40.216 align:middle
si quieres consultar dónde alguna propiedad
es igual a un valor, utiliza findBy()

00:00:40.216 --> 00:00:41.896 align:middle
y pasa el nombre de la propiedad y el valor.

00:00:42.486 --> 00:00:46.056 align:middle
Cuando se trata de relaciones, ¡es lo mismo!

00:00:46.056 --> 00:00:50.976 align:middle
$parts = $partRepository->findBy(['starship'
=> $ship]).

00:00:51.476 --> 00:00:54.846 align:middle
Y no, no vamos a hacer Starship
ID ni nada por el estilo.

00:00:55.256 --> 00:00:56.826 align:middle
¡Mantén los identificadores fuera de esto!

00:00:56.826 --> 00:01:00.396 align:middle
En su lugar, pasa el propio objeto Starship.

00:01:00.396 --> 00:01:04.766 align:middle
Puedes pasarle id si te da pereza, pero en
el espíritu de la Doctrine, las relaciones

00:01:04.766 --> 00:01:08.606 align:middle
y el pensamiento sobre objetos, lo mejor
es pasarle el objeto Starship entero.

00:01:09.116 --> 00:01:15.836 align:middle
Vamos a depurar y a ver qué tenemos:
dd($parts): Actualiza, y ¡voilá!

00:01:16.296 --> 00:01:20.446 align:middle
Una matriz de 10 objetos StarshipPart,
todos relacionados con este Starship.

00:01:21.006 --> 00:01:21.736 align:middle
Impresionante, ¿verdad?

00:01:21.736 --> 00:01:24.746 align:middle
Si crees que sí, agárrate los pantalones.

00:01:25.256 --> 00:01:29.846 align:middle
Sustituye $parts por
$ship->getParts(): ¡Actualiza!

00:01:30.566 --> 00:01:36.936 align:middle
En lugar de una matriz de objetos StarshipPart,
obtenemos un objeto PersistentCollection que parece...

00:01:36.936 --> 00:01:41.966 align:middle
vacío. ¿Recuerdas el ArrayCollection que
make:entity añadió a nuestro constructor Starship?

00:01:42.486 --> 00:01:46.076 align:middle
PersistentCollection y ArrayCollection forman
parte de la misma familia de colecciones.

00:01:46.556 --> 00:01:48.976 align:middle
Son objetos pero actúan como matrices.

00:01:49.556 --> 00:01:52.436 align:middle
Genial... pero ¿por qué
esta colección parece vacía?

00:01:52.986 --> 00:01:57.186 align:middle
Porque Doctrine es inteligente: no consulta
las partes hasta que las necesitamos.

00:01:57.186 --> 00:02:05.066 align:middle
Haz un bucle sobre
$ship->getParts() y vuelca $part:

00:02:05.066 --> 00:02:09.186 align:middle
De repente, esa colección de aspecto vacío
está llena de los 10 objetos StarshipPart.

00:02:09.446 --> 00:02:12.966 align:middle
¡Mágico! Aquí hay dos consultas en juego.

00:02:13.386 --> 00:02:17.276 align:middle
La primera es para el Starship, y la
segunda es para todos sus StarshipParts.

00:02:18.376 --> 00:02:21.936 align:middle
La primera proviene de la consulta de
Symfony para el Starship basada en el slug.

00:02:22.586 --> 00:02:27.616 align:middle
El segundo es más interesante: ocurre en
el momento en que foreach sobre el parts.

00:02:28.226 --> 00:02:32.106 align:middle
En ese preciso instante Doctrine
dice: Acabo de acordarme:

00:02:32.106 --> 00:02:35.546 align:middle
En realidad no tengo los datos de
StarshipPartpara este Starship.

00:02:35.966 --> 00:02:37.016 align:middle
Déjame ir a buscarlos.

00:02:37.586 --> 00:02:38.896 align:middle
¿No es increíble?

00:02:39.296 --> 00:02:41.026 align:middle
Me dan ganas de hacer una fiesta para Doctrine.

00:02:41.786 --> 00:02:43.896 align:middle
Deshazte por completo de la variable parts...

00:02:44.236 --> 00:02:48.716 align:middle
y elimina StarshipPartRepository:
eso era demasiado trabajo.

00:02:50.446 --> 00:02:53.346 align:middle
En su lugar, establece una variable
parts en $ship->getParts():

00:02:54.236 --> 00:02:58.046 align:middle
Ahora que tenemos nuestra nueva y reluciente variable
parts, haz un bucle sobre ella en la plantilla.

00:02:58.956 --> 00:03:04.046 align:middle
Abre templates/starship/show.html.twig y
sustituye la parte codificada por nuestro bucle:

00:03:04.046 --> 00:03:23.446 align:middle
for part in parts, part.name, part.price,
part.notes, endfor: ¡Y lo hemos conseguido!

00:03:23.756 --> 00:03:26.496 align:middle
Hemos conseguido mostrar
las 10 partes relacionadas,

00:03:26.916 --> 00:03:31.106 align:middle
sin hacer ningún trabajo serio
gracias a $ship->getParts().

00:03:31.106 --> 00:03:31.686 align:middle
¿Pero sabes una cosa?

00:03:31.686 --> 00:03:33.316 align:middle
Incluso esto es demasiado trabajo.

00:03:33.756 --> 00:03:42.936 align:middle
Deshazte por completo de la variable
parts: for part in ship.parts: Y...

00:03:42.936 --> 00:03:43.986 align:middle
¡todavía no se ha roto!

00:03:43.986 --> 00:03:48.726 align:middle
Para divertirnos, mostremos también
el número de piezas de esta nave.

00:03:52.686 --> 00:04:00.076 align:middle
ship.parts|length: Seguimos teniendo dos consultas,
pero Doctrine, una vez más, es inteligente.

00:04:00.516 --> 00:04:05.206 align:middle
Sabe que ya hemos consultado todas las
StarshipPart s , así que cuando las contemos,

00:04:05.256 --> 00:04:07.736 align:middle
en realidad no necesitamos
hacer otra consulta de recuento.

00:04:08.626 --> 00:04:12.736 align:middle
A continuación, hablaremos de un tema a menudo
incomprendido en las relaciones Doctrine:

00:04:13.096 --> 00:04:15.916 align:middle
el lado propio frente al
inverso de cada relación.
